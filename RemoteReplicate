#!/usr/local/bin/zsh
cd /TopStor
export POR;
export RR; 
export PROXY;
function Proxyinitialize() {
 so=`echo $@ | awk '{print $1}'`;
 dst=`echo $@ | awk '{print $2}'`;
 msg=`echo $@ | awk '{$1=""; print substr($0,2)}'`
 proxyser=`cat proxy.txt | awk '{print $1}'`;
 license=` cat proxy.txt | awk '{print $2}'`;
 lineflag="failed"
 stamp=`date +%s`
 read -t 2  line < /tmp/msgrack ;
 flagcount=0;
 echo initporxyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy >> txt/tmpproxyrequest
 echo $so $stamp $dst $license $msg  | openssl enc -a -A -aes-256-cbc -k SuperSecretPWD | gzip -cf | nc -N $proxyser 2234
 echo echo $so $stamp $dst $license $msg  \| openssl enc -a -A -aes-256-cbc -k SuperSecretPWD \| gzip -cf \| nc -N $proxyser 2234 >> txt/tmpproxyrequest
PROXY=$proxyser;
}
#############################################################################
function Remoteinitialize() {
 so=`echo $@ | awk '{print $1}'`;
 dst=`echo $@ | awk '{print $2}'`;
 reply=`echo $@ | awk '{print $3}'`;
 pp2=`echo $@ | awk '{print $5}'`;
 msg=`echo $@ | awk '{$1=$2=$3=""; print substr($0,4)}'`
 lineflag="failed"
 stamp=`date +%s`
 read -t 2  line < /tmp/msgrack ;
 flagcount=0;
 echo initxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx >> txt/tmpproxyrequest
 while [[ $lineflag == "failed" && flagcount -le 5 ]]; do
 {
  echo echo $so $stamp $reply $msg \| openssl enc -a -A -aes-256-cbc -k SuperSecretPWD \| gzip -cf \| nc -N  $dst  2234 >> txt/tmpproxyrequest
  echo $so $stamp $reply $msg | openssl enc -a -A -aes-256-cbc -k SuperSecretPWD | gzip -cf | nc -N  $dst  2234
  read -t 2 line < /tmp/msgrack ;
  stampreply=`echo $line | awk '{print $1}'`;
  flagcount=$((flagcount+1));
  if [[ $stampreply == $stamp ]]; then echo line=$line >> txt/tmpproxyrequest; lineflag=`echo $line | awk '{$1=$2="";print substr($0,3)}'`;  fi 
  echo initloopline=$lineflag >> txt/tmpproxyrequest
 }
 done;
 POR=`echo waiting | nc -N $dst $pp2`;
 echo initafterrequest=$POR >> txt/tmpproxyrequest
}
#############################################################################33
function RemoteAsk() {
 msg=`echo $@ | awk '{print $1}'`;
 flagcount=0;
 echo RemoteAskxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx >> txt/tmpproxyrequest
 lineflag=`echo $msg | nc -N  $PROXY $POR `; 
 lineflag=`echo $msg | nc -N  $PROXY $POR `; 
 lineflagn=`echo $lineflag | wc -c `;
  echo lineflag=$lineflag  linen=$lineflagn count=$flagcount >> txt/tmpproxyrequest
 while [[ $lineflagn -le 2 && $flagcount -le 20 ]]; do
 {
#  sleep 1
 lineflag=`echo waiting | nc -N $dst $POR`;
 lineflagn=`echo $lineflag | wc -c `;
  flagcount=$((flagcount+1));
  echo lineflag=$lineflag  linen=$lineflagn count=$flagcount >> txt/tmpproxyrequest
 }
 done;
 if [[ $lineflag == "waiting" ]]; then RR="FAILED"; else RR=$lineflag; fi;
 echo afterAsk=$RR >> txt/tmpproxyrequest
 #echo $lineflag;
}
###############################################################################
#########################################################################
###############################################################################
so=`echo $@ | awk '{print $1}'`;
dst=`echo $@ | awk '{print $2}'`;
filelog=`echo $@ | awk '{print $3}'`;
snap=`echo $@ | awk '{print $4}'`
pool=`echo $@ | awk '{print $5}'`;
vol=`echo $@ | awk '{print $6}'`;
pp=$(( 3000+( $(od -An -N2 -i /dev/random) )%(4000-1024+1) ))
pt=$(( pp+1 ));
echo Replicate=$RR >> txt/tmpproxyrequest
echo Roperands=$@ >> txt/tmpproxyrequest;
Proxyinitialize $so $dst ProxysendReInit.sh $dst $pp;
#Remoteinitialize $so $dst nop ReInit.sh $pp ;
POR=$pp;
RemoteAsk  ready; 
echo pp=$pp while POR=$POR >> txt/tmpproxyrequest
if [[ $POR != "waiting" ]]; then echo cannot make session;
else 
 POR=$pp;
 echo RemoteAsk $dst RemoteVolSearch $vol >> txt/tmpproxyrequest
 RemoteAsk $dst RemoteVolSearch $vol;
 volfound=$RR;
 echo volfound=$volfound >> txt/tmpproxyrequest
 if [[ $volfound == 'FAILED' ]]; then echo Problem: $volfound >> $filelog; exit 1 ; fi
 if [[ $volfound == "no" ]];
 then
  echo no >> txt/tmpproxyrequest
  volpar=`./RemoteGetPoolVollist $vol`;
  prot=`echo $volpar | awk '{print $1}'`;
  size=`echo $volpar | awk '{print $2}'`;
  echo RemoteAsk $dst VolumeCreate$prot $pool $vol ${size}M admin >> txt/tmpproxyrequest 
  RemoteAsk $dst VolumeCreate$prot $pool $vol ${size}M admin; 
  echo RemoteAsk $dst repli.sh $pt $pool $so $vol >> txt/tmpproxyrequest;
  tobeready=`RemoteAsk $dst repli.sh $pt $pool $so $vol` ;
#  echo RemoteAsk $dst GetPoolVollist hi  >> txt/tmpproxyrequest; 
#  RemoteAsk $dst GetPoolVollist hi  
  echo zfs send -D $pool/$vol@$snap  \| openssl enc -a -A -aes-256-cbc -k SuperSecretPWD \| gzip -cf \| nc -N  $dst $pt  >> txt/tmpproxyrequest;
  zfs send -D $pool/$vol@$snap  | openssl enc -a -A -aes-256-cbc -k SuperSecretPWD | gzip -cf | nc -N  $dst $pt ;
 else 
  if [[ $volfound == "found" ]];
  then
   echo foundfoundfoundfoudnfoundofudnffoudnsdoufndfousdn >> txt/tmpproxyrequest
   RemoteAsk $dst RemoteGetSnaplist $vol;
   oldsnaps=$RR
   localsnaps=`./RemoteGetSnaplist $vol`;
   ll=$oldsnaps;
   ll=${ll}' spot';
   echo ll=$ll >> txt/tmpproxyrequest
   lineupsnaps=`echo $ll | tr ' ' '\n' `
   initialsnap="";
   echo $lineupsnaps | while read -r line  
   do
    if [[ ${localsnaps/$line} == $localsnaps ]];
    then ; else initialsnap=$line;  break; fi;
   done;
   targetsnap=$pool/$vol@$snap
   echo targetsnap=$targetsnap >> txt/tmpproxyrequest
   echo initialsnap=$initialsnap >> txt/tmpproxyrequest
   if [[ $initialsnap == $targetsnap ]]; 
   then echo up-to-date >> txt/tmpproxyrequest; fi
   if [[ $initialsnap == "" ]];
   then 
    echo yyyyyyyyyyyyyintital is null >> txt/tmpproxyrequest 
    echo RemoteAsk $dst destroysnaps.sh $vol >> txt/tmpproxyrequest;
    RemoteAsk $dst destroysnaps.sh $vol ;
    echo RemoteAsk $dst repli.sh $pt $pool $so $voli >> txt/tmpproxyrequest;
    RemoteAsk $dst repli.sh $pt $pool $so $vol;
    echo zfs send -R   $targetsnap  \| openssl enc -a -A -aes-256-cbc -k SuperSecretPWD \| gzip -cf \| nc -N  $dst $pt >> txt/tmpproxyrequest
    zfs send -R   $targetsnap  | openssl enc -a -A -aes-256-cbc -k SuperSecretPWD | gzip -cf | nc -N  $dst $pt;
   else
    echo RemoteAsk $dst repli.sh $pt $pool $so $vol >> txt/tmpproxyrequest;
    RemoteAsk $dst repli.sh $pt $pool $so $vol;
    zfs send -R -I $initialsnap  $targetsnap  | openssl enc -a -A -aes-256-cbc -k SuperSecretPWD | gzip -cf | nc -N  $dst $pt;
   fi
  fi
 fi
 ./GetSnaplist & 
 echo RemoteAsk $dst GetSnaplist hi  >> txt/tmpproxyrequest 
 RemoteAsk $dst GetSnaplist hi  
fi
 echo POR=$POR RemoteAsk $dst done >> txt/tmpproxyrequest ; 
 RemoteAsk $dst done  & ; 
