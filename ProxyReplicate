#!/usr/local/bin/zsh
cd /TopStor
glog='/TopStordata/TopStor.log';
txt='/TopStordata/'`basename $0`
export POR;
export HOSTNAM;
export SNP;
export POL;
export VOL;
export DST; 
export RR; 
export PPSEND; 
export PORzfs; 
export REMOTETUN; 
export FILELOG; 
export LOCALREP; 
export OPERS;
export USERREQ;
#############################################################################33
function RemoteAsk() {
  RR=`ssh root@$REMOTETUN "cd /TopStor/; ./$@ "`
 echo RemoteAskxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx >> ${txt}
 echo Ask=$@  >> ${txt}
 echo afterAsk=$RR  >> ${txt}

}

function Sendzfs () {
 opt=`echo $@ | awk '{print $1}'`
 snap=`echo $@ | awk '{print $2}'`
 shost=`echo $@ | awk '{print $3}'`
 target=`echo $@ | awk '{print $4}'`
 intersnap=`echo $@ | awk '{print $5}'`
 echo pid $$ > ${txt}.pid 
 sshost=`ls /TopStordata/partner* | grep "$REMOTETUN" | xargs cat | grep "$shost" | awk '{print $1}'`
echo RemoteSendxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx >> ${txt}
 echo Ask=$@  >> ${txt}
 echo zfs send  -pv $opt $snap $intersnap \| ssh -C root\@$sshost zfs receive \-dvF $target >> ${txt}
 /usr/sbin/zfs send -p $opt $snap $intersnap | ssh -C root@$sshost "/usr/sbin/zfs receive -dvF $target" &> ${txt}.progress
  stampp=`date +%s`
  cp ${txt}.progress  ${txt}$stampp
 if [ $? -eq 0 ]; then
  RR=received
  datenow=`date +%m/%d/%Y`; timenow=`date +%T`;
dt=${datenow}'T'${timenow}; dtn=`date +%s -d $dt`;
  echo $datenow $timenow info $USERREQ Replica1153@@@$HOSTNAM@$REMOTETUN@$POL/$VOL/$SNP $dtn $stampp>> $glog
  echo afterAsk:success=$RR  >> ${txt}
 else
  RR=failed
  datenow=`date +%m/%d/%Y`; timenow=`date +%T`;
dt=${datenow}'T'${timenow}; dtn=`date +%s -d $dt`;
  echo $datenow $timenow error $USERREQ Replica1152@@@$HOSTNAM@$REMOTETUN@$POL/$VOL/$SNP $dtn $stampp>> $glog
  echo afterAsk:failed=$RR  >> ${txt}
 fi
 rm -rf ${txt}.pid >/dev/null
}
#########################################################################
## ./Asksend 1032_8($11) 10.176.214.6($9) 15737($10) RemoteVolSearch sdk
### $oper3 ${txt}RemoteSnapshotnowOnce.txt$stamp $newsnap2 $pooli $vol $remotetun $pp $so
## 1032_7 ${txt}RemoteSnapshotnowSystem.txt1438711440 Repli.Minutely.6.2.na.na.1438711440 Data forreplic 10.176.214.6 2236 1032_8 porxy
###############################################################################
startsec=`date +%s`
DST=`echo $@ | awk '{print $1}'`;
FILELOG=`echo $@ | awk '{print $2}'`;
snap=`echo $@ | awk '{print $3}'`
SNP=`echo $@ | awk '{print $3}'`
pool=`echo $@ | awk '{print $4}'`;
POL=`echo $@ | awk '{print $4}'`;
vol=`echo $@ | awk '{print $5}'`;
VOL=`echo $@ | awk '{print $5}'`;
REMOTETUN=`echo $@ | awk '{print $6}'`;
pp=` echo $@ | awk '{print $7}'`;
SO=`echo $@ | awk '{print $8}'`;
HOSTNAM=`cat /TopStordata/hostname`
USERREQ='system'
LOCALREP=` echo $@ | awk '{print $9}'`;
echo "starting" > ${txt}
 datenow=`date +%m/%d/%Y`; timenow=`date +%T`;
dt=${datenow}'T'${timenow}; dtn=`date +%s -d $dt`;
echo $datenow $timenow info $USERREQ Replica1151@@@$HOSTNAM@$REMOTETUN@$POL/$VOL/$SNP $dtn>> $glog
echo starting
echo Roperands=$@ >> ${txt};
POR=$pp;
echo RemoveVol search for vol=$vol >> ${txt}
echo RemoteAsk RemoteVolSearch $pool/$vol >> ${txt}
RemoteAsk RemoteVolSearch $vol;
volfound=$RR;
echo volfound=$volfound >> ${txt}
ps -axw | grep zfs | grep send >/dev/null 2>&1
if [[ $? -eq 0 ]]; then echo another replication is wokring.. canceled this > $FILELOG; echo another replication is wokring.. canceled this >> ${txt}; exit 0 ; fi 
prot=`/sbin/zfs get -H prot:kind $pool/$vol | awk '{print $3}'`
if [[ $volfound == "no" ]];
then
 echo nononononononononononnonononononononnonononononon >> ${txt}

 volsize=`/sbin/zfs get -t filesystem -Hp quota $pool/$vol | awk '{print$3}'` 
 RemoteAsk replipool.sh $vol $volsize
 Sendzfs  -DR $pool/$vol@$snap $RR 
 RemoteAsk set$prot $vol $SO $RR
 echo zfs RR=$RR >> ${txt}
else
 if [[ $volfound == "yes" ]];
 then
  echo foundfoundfoundfoudnfoundofudnffoudnsdoufndfousdn >> ${txt}
  RemoteAsk RemoteGetSnaplist $vol;
  if [[ $RR == "nothing" ]];  then oldsnaps=""; else oldsnaps=$RR; fi;
  localsnaps=`./GetSnaplistlocal $vol`;
  ll=$oldsnaps;
  ll=${ll}' spot';
  echo ll=$ll >> ${txt}
  lineupsnaps=`echo $ll | tr ' ' '\n' `
  initialsnap="";
  echo $lineupsnaps | while read -r line  
  do
   if [[ ${localsnaps/$line} == $localsnaps ]];
   then ; else initialsnap=$line;  break; fi;
  done;
  targetsnap=$pool/$vol@$snap
  echo targetsnap=$targetsnap >> ${txt}
  echo initialsnap=$initialsnap >> ${txt}
  if [[ $initialsnap == $targetsnap ]]; 
  then echo up-to-date >> ${txt}; fi
  if [[ $initialsnap == "" ]];
  then 
   echo yyyyyyyyyyyyyintital is null >> ${txt} 
   echo RemoteAsk destroysnaps $vol >> ${txt};
   RemoteAsk destroysnaps.sh $vol ;
   RemoteAsk replipool.sh $vol none 
   Sendzfs  -DR $pool/$vol@$snap $RR ;
#   RemoteAsk set$prot $vol $SO $RR
#   echo RemoteAsk replivol $PORzfs $REMOTETUN $SO $pool $vol nothing >> ${txt};
#   RemoteAsk replivol $PORzfs $REMOTETUN $SO $pool $vol nothing;
# echo exit  >> ${txt}
# exit
  else
   echo RemoteAsk replivol.sh $PORzfs $REMOTETUN $SO  $pool $vol $initialsnap >> ${txt}
   RemoteAsk replipool.sh $vol none 
   echo zfs send -DR -I $initialsnap  $targetsnap to ${txt}c$ppzfs >> ${txt};
   Sendzfs  -DRI  $initialsnap $RR $targetsnap;
  fi
 else
   echo target system $targetsnap is not responding  >> ${txt};
  datenow=`date +%m/%d/%Y`; timenow=`date +%T`;
dt=${datenow}'T'${timenow}; dtn=`date +%s -d $dt`;
  echo $datenow $timenow error $USERREQ Replica1152@@@$HOSTNAM@$REMOTETUN@$POL/$VOL/$SNP $dtn>> $glog
   exit 1;
  
 fi
fi
 RemoteAsk RemoteGetSnaplist $vol;
 echo $RR | grep $snap;
 if [[ $? -ne 0 ]]; then echo failed > ${txt}repliresult; else echo success > ${txt}repliresult; fi 
./GetSnaplist & 
echo RemoteAsk GetSnaplist hi  >> ${txt} 
RemoteAsk GetSnaplist  & 
 echo POR=$POR Compelete  >> ${txt} ; 
# RemoteAsk done  & 
endsec=`date +%s`
difsec=$((endsec-startsec));
echo $startsec $endsec $difsec >> ${txt}
echo finishedddddddddddddddddddddddddddddddddddddddddddddddddd >> ${txt}
