#!/usr/local/bin/zsh
cd /TopStor
export POR;
export RR; 
function Remoteinitialize() {
 so=`echo $@ | awk '{print $1}'`;
 dst=`echo $@ | awk '{print $2}'`;
 pp2=`echo $@ | awk '{print $6}'`;
 msg=`echo $@ | awk '{$1=$2=""; print substr($0,3)}'`
 lineflag="failed"
 stamp=`date +%s`
# read -t 1  line < /tmp/msgproxyrack ;
 flagcount=0;
 echo initxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx >> txt/tmpproxyrequest
  echo echo $so $stamp $msg \| openssl enc -a -A -aes-256-cbc -k SuperSecretPWD \| gzip -cf \| nc -N  $dst  2234 >> txt/tmpproxyrequest
  echo $so $stamp $msg | openssl enc -a -A -aes-256-cbc -k SuperSecretPWD | gzip -cf | nc -N  $dst  2234
 while [[ $lineflag == "failed" && flagcount -le 100 ]]; do
 {
  echo | nc -N $dst 2236 > /tmp/msgproxyrack &;
  read -t 2  line < /tmp/msgproxyrack ;
  stampreply=`echo $line | awk '{print $1}'`;
  echo line=$line , flagcount=$flagcount >> txt/tmpproxyrequest;
  flagcount=$((flagcount+1));
  if [[ $stampreply == $stamp ]]; then echo line=$line >> txt/tmpproxyrequest; lineflag=`echo $line | awk '{$1="";print substr($0,2)}'`; 
  else if [[ $flagcount -le 10 ]]; then 
    echo $so $stamp $msg | openssl enc -a -A -aes-256-cbc -k SuperSecretPWD | gzip -cf | nc -N  $dst  2234
   fi 
  fi
  echo initloopline=$lineflag >> txt/tmpproxyrequest
 }
 done;
 POR=$lineflag;
 echo initafterrequest=$POR >> txt/tmpproxyrequest
}
#############################################################################33
function RemoteAsk() {
 dst=`echo $@ | awk '{print $1}'`;
 ppc=`echo $@ | awk '{print $2}'`;
 msg=`echo $@ | awk '{$1=$2=""; print substr($0,3)}'`
 stamp=`date +%s`
 flagcount=0;
 echo RemoteAskxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx >> txt/tmpproxyrequest
 echo echo $stamp $msg \| nc -N  $dst $ppc >> txt/tmpproxyrequest
 echo $msg | nc -N  $dst $ppc ; 
 lineflagn=0; flagcount=0;
 while [[ $lineflagn -le 2 && $flagcount -le 40 ]]; do
 {
 sleep 1
 flag=`echo waiting | nc -N $dst $ppc`;
 flag=` echo $flag | grep $stamp `;
 echo flag=$flag >> txt/tmpproxyrequest
 if [[ $flag != "waiting" && $flagn -ge 3 ]]; then lineflag=`echo $flag | awk '{$1=""; print substr($0,2)}'`; lineflagn=$flagn; fi;  
  flagcount=$((flagcount+1));
 }
 done;
 RR=$lineflag;
 echo afterAsk=$RR >> txt/tmpproxyrequest
 #echo $lineflag;
}
###############################################################################
#########################################################################
###############################################################################
so=`echo $@ | awk '{print $1}'`;
dst=`echo $@ | awk '{print $2}'`;
filelog=`echo $@ | awk '{print $3}'`;
snap=`echo $@ | awk '{print $4}'`
pool=`echo $@ | awk '{print $5}'`;
vol=`echo $@ | awk '{print $6}'`;
proxy=`echo $@ | awk '{print $7}'`;
pass=`echo $@ | awk '{print $8}'`;
pp=$(( 3000+( $(od -An -N2 -i /dev/random) )%(4000-1024+1) ))
pt=$(( pp+1 ));
pt2=$(( pp+2 ));
echo Replicate=$RR >> txt/tmpproxyrequest
echo Roperands=$@ >> txt/tmpproxyrequest;
Remoteinitialize $so $proxy $pass nolicense ProxysendReInit.sh $dst $pp ;
echo pp=$pp while POR=$POR >> txt/tmpproxyrequest
proxywait=` echo $POR | awk '{print $1}'`;
passnew=` echo $POR | awk '{print $3}'`;
dstwait=` echo $POR | awk '{print $2}'`;
if [[ $proxywait != "waiting" ]]; then echo cannot make session with proxy >> txt/tmpproxyrequest; exit 1;
else 
 if [[ $dstwait != "waiting" ]]; then echo cannot make session..receiver session is not ready with proxy >> txt/tmpproxyrequest; exit 1;
 else 
  echo RemoteAsk $proxy $pp RemoteVolSearch $vol >> txt/tmpproxyrequest
  RemoteAsk $proxy $pp RemoteVolSearch $vol ;
  volfound=$RR;
  echo volfound=$volfound >> txt/tmpproxyrequest
  if [[ $volfound == 'FAILED' ]]; then echo Problem: $volfound >> $filelog; exit 1 ; fi
  if [[ $volfound == "no" ]];
  then
   echo no >> txt/tmpproxyrequest
   volpar=`./RemoteGetPoolVollist $vol`;
   prot=`echo $volpar | awk '{print $1}'`;
   size=`echo $volpar | awk '{print $2}'`;
   echo RemoteAsk $proxy $pp VolumeCreate$prot $pool $vol ${size}M admin >> txt/tmpproxyrequest 
   RemoteAsk $proxy $pp VolumeCreate$prot $pool $vol ${size}M admin; 
   echo RemoteAsk $proxy $pp repli.sh $pt $pool $so $vol >> txt/tmpproxyrequest;
   tobeready=`RemoteAsk  $proxy $pp repli.sh $pt $pool $so $vol` ;
#  echo RemoteAsk $dst GetPoolVollist hi  >> txt/tmpproxyrequest; 
#  RemoteAsk $dst GetPoolVollist hi  
   echo zfs send -D $pool/$vol@$snap  \| openssl enc -a -A -aes-256-cbc -k SuperSecretPWD \| gzip -cf \| nc -N  $proxy $pt  >> txt/tmpproxyrequest;
   zfs send -D $pool/$vol@$snap  | openssl enc -a -A -aes-256-cbc -k SuperSecretPWD | gzip -cf | nc -N  $proxy $pt ;
  else 
   if [[ $volfound == "found" ]];
   then
    echo foundfoundfoundfoudnfoundofudnffoudnsdoufndfousdn >> txt/tmpproxyrequest
    echo RemoteAsk $proxy $pp RemoteGetSnaplist $vol >> txt/tmpproxyrequest;
    RemoteAsk $proxy $pp RemoteGetSnaplist $vol;
    oldsnaps=$RR
    localsnaps=`./RemoteGetSnaplist $vol`;
    ll=$oldsnaps;
    ll=${ll}' spot';
    echo ll=$ll >> txt/tmpproxyrequest
    lineupsnaps=`echo $ll | tr ' ' '\n' `
    initialsnap="";
    echo $lineupsnaps | while read -r line  
    do
     if [[ ${localsnaps/$line} == $localsnaps ]];
     then ; else initialsnap=$line;  break; fi;
    done;
    targetsnap=$pool/$vol@$snap
    echo targetsnap=$targetsnap >> txt/tmpproxyrequest
    echo initialsnap=$initialsnap >> txt/tmpproxyrequest
    if [[ $initialsnap == $targetsnap ]]; 
    then echo up-to-date >> txt/tmpproxyrequest; fi
    if [[ $initialsnap == "" ]];
    then 
     echo yyyyyyyyyyyyyintital is null >> txt/tmpproxyrequest 
     echo RemoteAsk  $proxy $pp destroysnaps.sh $vol >> txt/tmpproxyrequest;
     RemoteAsk $proxy $pp destroysnaps.sh $vol ;
     echo RemoteAsk $proxy $pp repli.sh $pt $pool $so $voli >> txt/tmpproxyrequest;
     RemoteAsk $proxy $pp repli.sh $pt $pool $so $vol;
     echo zfs send -R   $targetsnap  \| openssl enc -a -A -aes-256-cbc -k SuperSecretPWD \| gzip -cf \| nc -N  $proxy $pt >> txt/tmpproxyrequest
     zfs send -R   $targetsnap  | openssl enc -a -A -aes-256-cbc -k SuperSecretPWD | gzip -cf | nc -N  $proxy $pt;
    else
     echo RemoteAsk $proxy $pp repli.sh $pt $pool $so $vol >> txt/tmpproxyrequest;
     RemoteAsk $proxy $pp repli.sh $pt $pool $so $vol;
     echo zfs send -R -I $initialsnap  $targetsnap  \| openssl enc -a -A -aes-256-cbc -k SuperSecretPWD \| gzip -cf \| nc -N  $proxy $pt >> txt/tmpproxyrequest;
     zfs send -R -I $initialsnap  $targetsnap  | openssl enc -a -A -aes-256-cbc -k SuperSecretPWD | gzip -cf | nc -N  $proxy $pt;
    fi
   fi
  fi
  ./GetSnaplist & 
  echo RemoteAsk $proxy $pp GetSnaplist hi  >> txt/tmpproxyrequest 
  RemoteAsk $proxy $pp GetSnaplist hi  
  echo RemoteAsk $proxy $pp done >> txt/tmprequest ;
  RemoteAsk $proxy $pp done  & ;
  RemoteAsk $proxy $pt2 done  & ;
 fi 
fi
