#! /usr/local/bin/zsh
cd /TopStor
export POR;
export DST; 
export RR; 
export PPSEND; 
export PORzfs; 
export REMOTETUN; 
export OPERS;
#############################################################################33
function RemoteAsk() {
 RR="failed";
 msg=$@;
 stamp=`date +%s`;
 echo RemoteAskxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx >> txt/tmpproxyrequest
 rm txt/remotereply$DST 2>/dev/null
 echo sending $msg >> txt/tmpproxyrequest
# echo Asksend $SEND $msg >> txt/tmpproxyrequest; 
# ./Asksend $SEND $msg 2>/dev/null ; 
 echo $SO $stamp $@ \| nc -w 4 -N $REMOTETUN $PPSEND >> txt/tmpproxyrequest
 echo $SO $stamp $@ | nc -w 5 -N $REMOTETUN $PPSEND
 echo finished Ask >> txt/tmpproxyrequest
 echo asking for txt/remotereply$DST  >> txt/tmpproxyrequest; 
 flagcount=0;
 while [[ $flagcount -le 5 ]]; 
 do
  if [[ -a txt/remotereply$DST ]]; then break; fi
  flagcount=$((flagcount+1)); 
  sleep 1;
 done
 if [[ -f txt/remotereply$DST ]];
 then
  RR=`cat txt/remotereply$DST | tail -1 | awk '{print $4}'`;
 fi
 echo afterAsk=$RR flagcount=$flagcount >> txt/tmpproxyrequest
}
###############################################################################
function Sendzfs () {
 msg=$@;
# zfscom=`echo $msg | awk '{print $1}'`;
# param=`echo $msg | awk '{$1=""; print substr($0,2)}'`;
# echo \/sbin\/zfs send  $@ \|  nc -w 10 $REMOTETUN $PORzfs
 /sbin/zfs send $@ |  nc -w 10 $REMOTETUN $PORzfs
}
#########################################################################
## ./Asksend 1032_8($11) 10.176.214.6($9) 15737($10) RemoteVolSearch sdk
### $oper3 txt/RemoteSnapshotnowOnce.txt$stamp $newsnap2 $pooli $vol $remotetun $pp $so
###############################################################################
SO=`echo $@ | awk '{print $8}'`;
DST=`echo $@ | awk '{print $1}'`;
REMOTETUN=`echo $@ | awk '{print $6}'`;
filelog=`echo $@ | awk '{print $2}'`;
snap=`echo $@ | awk '{print $3}'`
pool=`echo $@ | awk '{print $4}'`;
vol=`echo $@ | awk '{print $5}'`;
pp=` echo $@ | awk '{print $7}'`;
#pp=$(( 3000+( $(od -An -N2 -i /dev/random) )%(4000-1024+1) ))
PPSEND=$((pp+1));
PORzfs=$((pp+2));
echo Replicate=$RR >> txt/tmpproxyrequest
echo Roperands=$@ >> txt/tmpproxyrequest;
POR=$pp;
echo RemoteAsk RemoteVolSearch $vol >> txt/tmpproxyrequest
RemoteAsk RemoteVolSearch $vol;
volfound=$RR;
echo volfound=$volfound >> txt/tmpproxyrequest
if [[ $volfound == 'failed' ]]; then 
 #echo \Problem\: $volfound >> $filelog;i
 exit 0 ; fi
if [[ $volfound == "no" ]];
then
 RemoteAsk replidf $PORzfs $REMOTETUN $so 
 echo zfs -D $pool/$vol@$snap  >> txt/tmpproxyrequest;
 Sendzfs  -D $pool/$vol@$snap ;
 echo zfs RR=$RR >> txt/tmpproxyrequest
 exit 0
 if [[ $volfound == "found" ]];
 then
  echo foundfoundfoundfoudnfoundofudnffoudnsdoufndfousdn >> txt/tmpproxyrequest
  RemoteAsk RemoteGetSnaplist $vol;
  if [[ $RR == "nothing" ]];  then oldsnaps=""; else oldsnaps=$RR; fi;
  localsnaps=`./RemoteGetSnaplist $vol`;
  ll=$oldsnaps;
  ll=${ll}' spot';
  echo ll=$ll >> txt/tmpproxyrequest
  echo oldsnaps result $RR >> txt/tmpproxyrequest;
  lineupsnaps=`echo $ll | tr ' ' '\n' `
  initialsnap="";
  echo $lineupsnaps | while read -r line  
  do
   if [[ ${localsnaps/$line} == $localsnaps ]];
   then ; else initialsnap=$line;  break; fi;
  done;
  targetsnap=$pool/$vol@$snap
  echo targetsnap=$targetsnap >> txt/tmpproxyrequest
  echo initialsnap=$initialsnap >> txt/tmpproxyrequest
  if [[ $initialsnap == $targetsnap ]]; 
  then echo up-to-date >> txt/tmpproxyrequest; fi
  if [[ $initialsnap == "" ]];
  then 
   echo yyyyyyyyyyyyyintital is null >> txt/tmpproxyrequest 
   echo RemoteAsk destroysnaps.sh $vol >> txt/tmpproxyrequest;
   RemoteAsk destroysnaps.sh $vol ;
   echo RemoteAsk repli.sh $pp $pool $so $vol >> txt/tmpproxyrequest;
   RemoteAsk repli.sh $pp $pool $so $vol;
#echo exit  >> txt/tmpproxyrequest
#exit
   echo zfs send -R   $targetsnap  to  txt/c$ppzfs >> txt/tmpproxyrequest;
   Sendzfs zfs send -R   $targetsnap ;
   exit;
  else
   echo RemoteAsk repli.sh $pp $pool $so $vol >> txt/tmpproxyrequest;
   RemoteAsk repli.sh $pp $pool $so $vol;
   echo zfs send -R -I $initialsnap  $targetsnap to txt/c$ppzfs >> txt/tmpproxyrequest;
   Sendzfs zfs send -R -I $initialsnap  $targetsnap ;
  fi
 fi
fi
./GetSnaplist & 
echo RemoteAsk GetSnaplist hi  >> txt/tmpproxyrequest 
RemoteAsk GetSnaplist hi & 
 echo POR=$POR Compelete  >> txt/tmpproxyrequest ; 
# RemoteAsk done  & ; 
